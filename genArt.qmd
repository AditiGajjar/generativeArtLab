---
title: "Generative Art"
author: "Aditi Gajjar"
format: html
editor: visual
embed-resources: true
---

## Bloom - ordinary plotting functions

```{r}
library(ggplot2)
library(tibble)
library(viridis)
library(dplyr)
library(purrr)
library(ambient)
```

```{r}
sample_data <- function(seed = NULL, n = 100){
  if(!is.null(seed)) set.seed(seed)
  dat <- tibble(
    x0 = runif(n),
    y0 = runif(n),
    x1 = x0 + runif(n, min = -.2, max = .2),
    y1 = y0 + runif(n, min = -.2, max = .2),
    shade = runif(n), 
    size = runif(n),
    alpha = runif(n),
    shape = factor(sample(0:22, size = n, replace = TRUE))
  )
}
```

```{r}
sample_canva <- function(seed = NULL) {
  if(!is.null(seed)) set.seed(seed)
  sample(ggthemes::canva_palettes, 1)[[1]]
}

```

```{r}
polar_styled_plot <- function(data = NULL, palette) {
  ggplot(
    data = data,
    mapping = aes(
      x = x0,
      y = y0,
      xend = x1,
      yend = y1,
      colour = shade,
      size = size,
      alpha = alpha,
      fill = shade
    )) + 
    coord_polar(clip = "off") +
    scale_y_continuous(
      expand = c(0, 0),
      limits = c(0, 1), 
      oob = scales::oob_keep
    ) +
    scale_x_continuous(
      expand = c(0, 0), 
      limits = c(0, 1), 
      oob = scales::oob_keep
    ) + 
    scale_colour_gradientn(colours = palette) + 
    scale_size(range = c(0, 10)) + 
    theme_void() + 
    guides(
      colour = guide_none(),
      size = guide_none(),
      fill = guide_none(),
      shape = guide_none()
    )
}

```

```{r, warning=FALSE}
dat <- sample_data(n = 3040, seed = 223)
dat2 <- sample_data(n = 75, seed = 223) |>  
  mutate(y0 = 1.2 + y0 * 1.1, y1 = .2)
pal <- sample_canva(seed = 22)

polar_styled_plot(data = dat, palette = pal) + 
  geom_point(show.legend = FALSE) +
  geom_segment(
    data = dat2 |> mutate(size = size / 12, alpha = alpha / 2), 
    lineend = "round", 
    colour = "white",
    show.legend = FALSE
  ) +
  geom_segment(
    data = dat2 |> mutate(size = size / 100), 
    lineend = "round", 
    colour = "darkorchid4",
    show.legend = FALSE
  ) +
  geom_point(
    data = dat2 |> mutate(size = size* 0.8),
    colour = "hotpink",
    show.legend = FALSE,
    pch = 8
    
  )
```

**Description:** Inspired by limited Spring flavor of GT Kombucha: Bloom, this art showcases the feeling I get every time this year when this flavor is released for the short period of time. I believe it lives up to its name, making me feel one with the flowers, and nothing short of whimsical. The artwork above, titled Bloom, encompasses that.

**Code Choices:**

-   I began with Danielle's original code to produce polar coordinate plots. It is takes a palette and if specified, a data set as inputs, and sets up the mappings and the stylistic aspects to the plot. This made it easier to play around with different plots and effectively build on top of one another.
-   The first thing I changed was adding an alpha value, that would change the transparency of the points and other elements. I let that be determined randomly as well, to make it easier to add dimension without having to specify too much.
-   Then, I uncreased the number of points, and added the lines and stars by mutating the second data set such that the points would lie outside my polarized point graph. The `pch` argument for `geom_point` allowed me to change the points to stars at the end of the

## Title Art 2 - c**ompletely generative**

```{r}
library(voronoise)
```

```{r}
set.seed(45)
dat <- tibble(
  x = runif(500),
  y = runif(500),
  val = runif(500)
)
pic <- ggplot(dat, aes(x, y, fill = val)) +
  theme_void() + 
  coord_equal(xlim = c(-2.5, 2.5), ylim = c(-2.5, 2.5)) + 
  scale_fill_gradientn(colours = palette) + 
  scale_x_continuous(expand = c(0, 0)) +
  scale_y_continuous(expand = c(0, 0)) +
  geom_voronoi_tile(colour = "gray31", size = .2, show.legend = FALSE) +
  geom_point(aes(colour = val), size = runif(500, 2, 6), alpha = 0.6) + 
  geom_segment(aes(x = x, xend = x + rnorm(500, 0, 0.1), y = y, yend = y + rnorm(500, 0, 0.1)), alpha = 0.3, color = "pink3")

# Display the plot
pic
```

```{r}
unboxy <- function(iterations, layers) {
  
  coeffs <- array(
    data = runif(978 * layers, min = -1, max = 1), 
    dim = c(3, 3, layers)
  )
  
  point0 <- matrix(
    data = runif(3, min = -1, max = 1), 
    nrow = 1,
    ncol = 3
  )
  
  funs <- list(
    function(point) point + (sum(point ^ 2)) ^ (1/3),
    function(point) sin(point),
    function(point) 2 * sin(point)
  )
  
  update <- function(point, t) {
    l <- sample(layers, 1)
    f <- sample(funs, 1)[[1]]
    z <- point[3]
    point[3] <- 1
    point <- f(point %*% coeffs[,,l])
    point[3] <- (point[3] + z)/2
    return(point)
  }
  
  points <- accumulate(1:iterations, update, .init = point0)
  points <- matrix(unlist(points), ncol = 3, byrow = TRUE)
  points <- as_tibble(as.data.frame(points)) 
  names(points) <- c("x", "y", "val")
  return(points)
}

sample_canva2 <- function(seed = NULL, n = 4) {
  if(!is.null(seed)) set.seed(seed)
  sample(ggthemes::canva_palettes, 1)[[1]] |>
    (\(x) colorRampPalette(x)(n))()  
}
```

```{r}

set.seed(22)
dat <- unboxy(iterations = 1000, layers = 5) 
```

```{r}
noise <- long_grid(
  seq(-2.5, 2.5, length.out = 500),
  seq(-2.5, 2.5, length.out = 500)
) %>%
  mutate(noise = gen_simplex(x, y))

noise_df <- as.data.frame(noise)


pic <- ggplot(dat, aes(x, y, fill = val)) +
  theme_void() + 
  coord_equal(xlim = c(-2.5, 2.5), ylim = c(-2.5, 2.5)) + 
  scale_fill_gradientn(colours = sample_canva2(91)) + 
  scale_x_continuous(expand = c(0, 0)) +
  scale_y_continuous(expand = c(0, 0))

# Add voronoi tiles and noise texture
final_plot <- pic +
  geom_voronoi_tile(
    colour = "hotpink4",
    size = .2, 
    show.legend = FALSE
  ) +
  geom_raster(data = noise_df, aes(x, y, fill = noise), alpha = 0.7, inherit.aes = FALSE) +
  scale_fill_gradient(low = "maroon4", high = "lightpink", guide = "none")
final_plot
```

**Description:** This is what I would assume that a Barbie Birkin would look like up close. Not to say I have seen a Birkin up close (or from afar if I am being honest), however, this is what I assume it would look like. Upon rendering this image I am happy to report that I am not enticed by th idea of owning a Birkin, as even the color pink does not appeal me to this monstrosity.

**Code Choices:**

-   A description of the code choices and how they influenced the appearance of the piece.Â  For example, you might say, "By setting the number of recursions to 100, we repeat the pattern 100 times in the space of the image."
